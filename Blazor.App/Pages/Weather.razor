@page "/weather"
@using Blazor.App.Authentication
@using BlazorAuthenticationTutorial.Shared
@using Blazored.LocalStorage
@inject IHttpClientFactory HttpClientFactory
@inject ILocalStorageService localStorage


<PageTitle>Weather</PageTitle>

<h1>Weather</h1>

<p>This component demonstrates fetching data from the server.</p>

@if (forecasts == null)
{
    <p><em>Loading...</em></p>
}
else
{
    @if (IsAuthorized)
    {
        <table class="table">
            <thead>
                <tr>
                    <th>Date</th>
                    <th>Temp. (C)</th>
                    <th>Temp. (F)</th>
                    <th>Summary</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var forecast in forecasts)
                {
                    <tr>
                        <td>@forecast.Date.ToShortDateString()</td>
                        <td>@forecast.TemperatureC</td>
                        <td>@forecast.TemperatureF</td>
                        <td>@forecast.Summary</td>
                    </tr>
                }
            </tbody>
        </table>
    }
    else
    {
        <div class="alert alert-danger" role="alert">
            Utente non autorizzato!
        </div>
    }
}

@code {
private WeatherForecast[]? forecasts;
private bool IsAuthorized = false;

protected override async Task OnInitializedAsync()
{
        var client = HttpClientFactory.CreateClient("BackendAPI");

        var response = await client.GetAuthenticatedAsync(localStorage, "WeatherForecast");

        if (response.IsSuccessStatusCode)
        {
            // Deserializza il contenuto della risposta in un array di WeatherForecast
            forecasts = await response.Content.ReadFromJsonAsync<WeatherForecast[]>();
            IsAuthorized = true;
        }

        if (response.StatusCode == System.Net.HttpStatusCode.Unauthorized)
        {
            IsAuthorized = false;
            forecasts = [];
        }
}
}
